name: Build and Publish Images

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        type: boolean
        default: false
      php_versions:
        description: 'PHP versions (comma-separated, auto-discovers if empty)'
        required: false
        type: string
      node_versions:
        description: 'Node versions (comma-separated, auto-discovers if empty)'
        required: false
        type: string
  schedule:
    # Daily at 3 AM UTC (after mirror job)
    - cron: '0 3 * * *'
  push:
    branches: [master]
    paths:
      - 'Dockerfile*'
      - '.github/workflows/*.yml'
  pull_request:
    paths:
      - 'Dockerfile*'
      - '.github/workflows/*.yml'

env:
  GHCR_REGISTRY: ghcr.io
  GHCR_BASE: ghcr.io/${{ github.repository_owner }}/gitlab-ci-base-images
  TARGET_REGISTRY: ghcr.io/${{ github.repository_owner }}/gitlab-ci

jobs:
  discover-versions:
    name: Discover Available Versions
    runs-on: ubuntu-latest
    outputs:
      php_versions: ${{ steps.discover.outputs.php_versions }}
      node_versions: ${{ steps.discover.outputs.node_versions }}
      build_scope: ${{ steps.discover.outputs.build_scope }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup crane
        uses: imjasonh/setup-crane@v0.4

      - name: Determine build scope
        id: scope
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "build_scope=minimal" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]] || \
               [[ "${{ github.ref }}" == "refs/heads/master" ]] || \
               [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "build_scope=full" >> $GITHUB_OUTPUT
          else
            echo "build_scope=minimal" >> $GITHUB_OUTPUT
          fi

      - name: Discover versions
        id: discover
        run: |
          BUILD_SCOPE="${{ steps.scope.outputs.build_scope }}"
          echo "build_scope=$BUILD_SCOPE" >> $GITHUB_OUTPUT
          
          # Process PHP versions
          if [[ -n "${{ inputs.php_versions }}" ]]; then
            PHP_VERSIONS="${{ inputs.php_versions }}"
          else
            echo "📦 Auto-discovering PHP versions from GHCR mirror..."
            # Discover from our GHCR mirror (already mirrored by weekly job)
            PHP_VERSIONS=$(crane ls ${{ env.GHCR_BASE }}/php 2>/dev/null | \
              grep -E '^[78]\.[0-9]+-cli-(buster|bullseye|bookworm)$' | \
              sed 's/-cli-.*//' | sort -uV | \
              if [[ "$BUILD_SCOPE" == "minimal" ]]; then tail -1; else cat; fi | \
              tr '\n' ',' | sed 's/,$//')
            
            # Fallback to Docker Hub if GHCR is empty
            if [[ -z "$PHP_VERSIONS" ]]; then
              echo "⚠️ GHCR mirror empty, falling back to Docker Hub..."
              PHP_VERSIONS=$(crane ls php 2>/dev/null | \
                grep -E '^[78]\.[0-9]+-cli-(buster|bullseye|bookworm)$' | \
                sed 's/-cli-.*//' | sort -uV | \
                if [[ "$BUILD_SCOPE" == "minimal" ]]; then tail -1; else cat; fi | \
                tr '\n' ',' | sed 's/,$//')
            fi
          fi
          
          # Process Node versions
          if [[ -n "${{ inputs.node_versions }}" ]]; then
            NODE_VERSIONS="${{ inputs.node_versions }}"
          else
            echo "📦 Auto-discovering Node versions from GHCR mirror..."
            # Discover from our GHCR mirror
            NODE_VERSIONS=$(crane ls ${{ env.GHCR_BASE }}/node 2>/dev/null | \
              grep -E '^[0-9]+-(buster|bullseye|bookworm)$' | \
              sed 's/-.*//' | sort -n | \
              awk '$1 >= 14' | \
              if [[ "$BUILD_SCOPE" == "minimal" ]]; then echo "20,22"; else tr '\n' ',' | sed 's/,$//'; fi)
            
            # Fallback to Docker Hub if GHCR is empty
            if [[ -z "$NODE_VERSIONS" ]]; then
              echo "⚠️ GHCR mirror empty, falling back to Docker Hub..."
              NODE_VERSIONS=$(crane ls node 2>/dev/null | \
                grep -E '^[0-9]+-(buster|bullseye|bookworm)$' | \
                sed 's/-.*//' | sort -n | \
                awk '$1 >= 14' | \
                if [[ "$BUILD_SCOPE" == "minimal" ]]; then echo "20,22"; else tr '\n' ',' | sed 's/,$//'; fi)
            fi
          fi
          
          echo "PHP versions: $PHP_VERSIONS"
          echo "Node versions: $NODE_VERSIONS"
          echo "php_versions=$PHP_VERSIONS" >> $GITHUB_OUTPUT
          echo "node_versions=$NODE_VERSIONS" >> $GITHUB_OUTPUT

  build-images:
    name: Build PHP ${{ matrix.php }}
    needs: discover-versions
    if: needs.discover-versions.outputs.php_versions != ''
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        php: ${{ fromJson(format('[{0}]', needs.discover-versions.outputs.php_versions)) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Determine OS release
        id: os
        run: |
          version="${{ matrix.php }}"
          major=${version%%.*}
          minor=${version#*.}; minor=${minor%%.*}
          
          if [[ "$major" == "7" ]]; then
            [[ "$minor" -le "2" ]] && os="buster" || os="bullseye"
          elif [[ "$major" == "8" ]]; then
            [[ "$minor" == "0" ]] && os="bullseye" || os="bookworm"
          else
            os="bookworm"
          fi
          echo "release=$os" >> $GITHUB_OUTPUT

      - name: Check if latest version
        id: latest
        run: |
          ALL_VERSIONS="${{ needs.discover-versions.outputs.php_versions }}"
          LATEST=$(echo "$ALL_VERSIONS" | tr ',' '\n' | sort -V | tail -1)
          [[ "${{ matrix.php }}" == "$LATEST" ]] && echo "is_latest=true" >> $GITHUB_OUTPUT || echo "is_latest=false" >> $GITHUB_OUTPUT

      - name: Build PHP base image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            PHP_VERSION=${{ matrix.php }}
            OS_RELEASE=${{ steps.os.outputs.release }}
            REGISTRY_BASE=${{ env.GHCR_BASE }}
          tags: |
            ${{ env.TARGET_REGISTRY }}:${{ matrix.php }}
            ${{ steps.latest.outputs.is_latest == 'true' && format('{0}:latest', env.TARGET_REGISTRY) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Node variants
        if: needs.discover-versions.outputs.build_scope == 'full'
        run: |
          NODE_VERSIONS="${{ needs.discover-versions.outputs.node_versions }}"
          IFS=',' read -ra NODE_ARRAY <<< "$NODE_VERSIONS"
          
          for node_version in "${NODE_ARRAY[@]}"; do
            echo "🔨 Building PHP ${{ matrix.php }} + Node $node_version..."
            
            # Determine Node OS release
            if [[ "$node_version" -le 15 ]]; then
              NODE_OS="buster"
            elif [[ "$node_version" -le 19 ]]; then
              NODE_OS="bullseye"
            else
              NODE_OS="bookworm"
            fi
            
            # Check if this is the latest Node version
            LATEST_NODE=$(echo "$NODE_VERSIONS" | tr ',' '\n' | sort -n | tail -1)
            IS_LATEST_NODE=$([[ "$node_version" == "$LATEST_NODE" ]] && echo "true" || echo "false")
            
            # Build tags
            TAGS="--tag ${{ env.TARGET_REGISTRY }}:${{ matrix.php }}-node$node_version"
            
            # Add latest-nodelatest tag if both are latest
            if [[ "${{ steps.latest.outputs.is_latest }}" == "true" && "$IS_LATEST_NODE" == "true" ]]; then
              TAGS="$TAGS --tag ${{ env.TARGET_REGISTRY }}:latest-nodelatest"
            fi
            
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push=${{ github.event_name != 'pull_request' }} \
              --file node/Dockerfile \
              --build-arg ENV_SOURCE_IMAGE=${{ env.TARGET_REGISTRY }} \
              --build-arg PHP_VERSION=${{ matrix.php }} \
              --build-arg NODE_VERSION=$node_version \
              --build-arg REGISTRY_BASE=${{ env.GHCR_BASE }} \
              $TAGS \
              .
          done

      - name: Build Composer 1 variant
        if: needs.discover-versions.outputs.build_scope == 'full'
        uses: docker/build-push-action@v5
        with:
          context: composer1
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            ENV_SOURCE_IMAGE=${{ env.TARGET_REGISTRY }}
            PHP_VERSION=${{ matrix.php }}
            REGISTRY_BASE=${{ env.GHCR_BASE }}
          tags: |
            ${{ env.TARGET_REGISTRY }}-composer1:${{ matrix.php }}
            ${{ steps.latest.outputs.is_latest == 'true' && format('{0}-composer1:latest', env.TARGET_REGISTRY) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max