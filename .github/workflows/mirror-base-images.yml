name: Mirror Base Images

on:
  workflow_dispatch:
    inputs:
      force_mirror:
        description: 'Force re-mirror all images'
        required: false
        type: boolean
        default: false
  schedule:
    # Run weekly on Sunday at 1 AM UTC
    - cron: '0 1 * * 0'

env:
  GHCR_REGISTRY: ghcr.io
  GHCR_BASE: ghcr.io/${{ github.repository_owner }}/gitlab-ci-base-images

jobs:
  mirror-images:
    name: Mirror Docker Hub Images to GHCR
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Setup crane
        uses: imjasonh/setup-crane@v0.4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Mirror PHP images
        run: |
          echo "📦 Discovering and mirroring PHP images..."
          
          # Function to determine preferred OS for PHP version
          get_preferred_php_os() {
            local ver=$1
            local major=${ver%%.*}
            local minor=${ver#*.}; minor=${minor%%.*}
            
            if [[ "$major" == "7" ]]; then
              echo "bullseye"  # 7.4 uses bullseye
            elif [[ "$major" == "8" ]]; then
              [[ "$minor" == "0" ]] && echo "bullseye" || echo "bookworm"
            else
              echo "bookworm"
            fi
          }
          
          # Get unique PHP versions from Docker Hub
          PHP_VERSIONS=$(crane ls php 2>/dev/null | \
            grep -E '^[78]\.[0-9]+-cli-(bullseye|bookworm)$' | \
            sed 's/-cli-.*//' | sort -uV | \
            awk '$1 >= "7.4"')
          
          for VERSION in $PHP_VERSIONS; do
            # Determine the preferred OS for this version
            PREFERRED_OS=$(get_preferred_php_os "$VERSION")
            
            # Try preferred OS first, fallback to any available
            TAG="${VERSION}-cli-${PREFERRED_OS}"
            SOURCE="php:${TAG}"
            
            # Check if preferred OS exists on Docker Hub
            if ! crane manifest "$SOURCE" >/dev/null 2>&1; then
              # Fallback to any available OS
              AVAILABLE_TAG=$(crane ls php 2>/dev/null | \
                grep "^${VERSION}-cli-" | \
                grep -E '(bullseye|bookworm)$' | \
                head -1)
              if [[ -n "$AVAILABLE_TAG" ]]; then
                TAG="$AVAILABLE_TAG"
                SOURCE="php:${TAG}"
                echo "⚠️ PHP ${VERSION}: Using ${TAG} (preferred ${PREFERRED_OS} not found)"
              else
                echo "❌ PHP ${VERSION}: No suitable image found"
                continue
              fi
            fi
            
            TARGET="${{ env.GHCR_BASE }}/php:${TAG}"
            
            # Check if already mirrored
            if crane manifest "$TARGET" >/dev/null 2>&1 && [[ "${{ inputs.force_mirror }}" != "true" ]]; then
              echo "✓ PHP ${VERSION} (${TAG}) already mirrored"
            else
              echo "🔄 Mirroring ${SOURCE} to ${TARGET}..."
              crane copy "$SOURCE" "$TARGET" && echo "✅ Mirrored PHP ${VERSION}" || echo "❌ Failed to mirror PHP ${VERSION}"
            fi
            
            # Clean up old OS variants for this version
            echo "  Cleaning old variants for PHP ${VERSION}..."
            crane ls ${{ env.GHCR_BASE }}/php 2>/dev/null | \
              grep "^${VERSION}-cli-" | \
              grep -v "^${TAG}$" | \
              while read OLD_TAG; do
                echo "  🗑️ Removing old variant: ${OLD_TAG}"
                crane delete "${{ env.GHCR_BASE }}/php:${OLD_TAG}" 2>/dev/null || true
              done
          done

      - name: Mirror Node images
        run: |
          echo "📦 Discovering and mirroring Node images..."
          
          # Get unique Node versions from Docker Hub (14+)
          NODE_VERSIONS=$(crane ls node 2>/dev/null | \
            grep -E '^[0-9]+-(bullseye|bookworm)$' | \
            sed 's/-.*//' | sort -un | \
            awk '$1 >= 14')
          
          for VERSION in $NODE_VERSIONS; do
            # Prefer bookworm for all Node versions
            PREFERRED_OS="bookworm"
            TAG="${VERSION}-${PREFERRED_OS}"
            SOURCE="node:${TAG}"
            
            # Check if preferred OS exists on Docker Hub
            if ! crane manifest "$SOURCE" >/dev/null 2>&1; then
              # Fallback to bullseye
              TAG="${VERSION}-bullseye"
              SOURCE="node:${TAG}"
              if ! crane manifest "$SOURCE" >/dev/null 2>&1; then
                echo "❌ Node ${VERSION}: No suitable image found"
                continue
              fi
              echo "⚠️ Node ${VERSION}: Using bullseye (bookworm not found)"
            fi
            
            TARGET="${{ env.GHCR_BASE }}/node:${TAG}"
            
            # Check if already mirrored
            if crane manifest "$TARGET" >/dev/null 2>&1 && [[ "${{ inputs.force_mirror }}" != "true" ]]; then
              echo "✓ Node ${VERSION} (${TAG}) already mirrored"
            else
              echo "🔄 Mirroring ${SOURCE} to ${TARGET}..."
              crane copy "$SOURCE" "$TARGET" && echo "✅ Mirrored Node ${VERSION}" || echo "❌ Failed to mirror Node ${VERSION}"
            fi
            
            # Clean up old OS variants for this version
            echo "  Cleaning old variants for Node ${VERSION}..."
            crane ls ${{ env.GHCR_BASE }}/node 2>/dev/null | \
              grep "^${VERSION}-" | \
              grep -v "^${TAG}$" | \
              while read OLD_TAG; do
                echo "  🗑️ Removing old variant: ${OLD_TAG}"
                crane delete "${{ env.GHCR_BASE }}/node:${OLD_TAG}" 2>/dev/null || true
              done
          done

      - name: Mirror Composer images
        run: |
          echo "📦 Mirroring Composer images..."
          
          for VERSION in 1 2; do
            SOURCE="composer:${VERSION}"
            TARGET="${{ env.GHCR_BASE }}/composer:${VERSION}"
            
            if crane manifest "$TARGET" >/dev/null 2>&1 && [[ "${{ inputs.force_mirror }}" != "true" ]]; then
              echo "✓ Composer ${VERSION} already mirrored"
            else
              echo "🔄 Mirroring ${SOURCE} to ${TARGET}..."
              crane copy "$SOURCE" "$TARGET" && echo "✅ Mirrored Composer ${VERSION}" || echo "❌ Failed to mirror Composer ${VERSION}"
            fi
          done

      - name: Mirror PhantomJS image
        run: |
          echo "📦 Mirroring PhantomJS image..."
          
          SOURCE="rollupdev/phantomjs:latest"
          TARGET="${{ env.GHCR_BASE }}/phantomjs:latest"
          
          if crane manifest "$TARGET" >/dev/null 2>&1 && [[ "${{ inputs.force_mirror }}" != "true" ]]; then
            echo "✓ PhantomJS already mirrored"
          else
            echo "🔄 Mirroring ${SOURCE} to ${TARGET}..."
            crane copy "$SOURCE" "$TARGET" && echo "✅ Mirrored PhantomJS" || echo "❌ Failed to mirror PhantomJS"
          fi

      - name: Final cleanup of duplicate OS variants
        run: |
          echo "🧹 Running final cleanup of duplicate OS variants..."
          
          # Function to determine preferred OS for PHP version
          get_preferred_php_os() {
            local ver=$1
            local major=${ver%%.*}
            local minor=${ver#*.}; minor=${minor%%.*}
            
            if [[ "$major" == "7" ]]; then
              echo "bullseye"  # 7.4 uses bullseye
            elif [[ "$major" == "8" ]]; then
              [[ "$minor" == "0" ]] && echo "bullseye" || echo "bookworm"
            else
              echo "bookworm"
            fi
          }
          
          # Clean up PHP duplicates
          echo "Cleaning PHP duplicates..."
          PHP_VERSIONS=$(crane ls ${{ env.GHCR_BASE }}/php 2>/dev/null | \
            grep -E '^[78]\.[0-9]+-cli-(bullseye|bookworm)$' | \
            sed 's/-cli-.*//' | sort -u)
          
          for VERSION in $PHP_VERSIONS; do
            PREFERRED_OS=$(get_preferred_php_os "$VERSION")
            PREFERRED_TAG="${VERSION}-cli-${PREFERRED_OS}"
            
            # Delete all variants except the preferred one
            crane ls ${{ env.GHCR_BASE }}/php 2>/dev/null | \
              grep "^${VERSION}-cli-" | \
              grep -v "^${PREFERRED_TAG}$" | \
              while read OLD_TAG; do
                echo "  🗑️ Removing duplicate: php:${OLD_TAG}"
                crane delete "${{ env.GHCR_BASE }}/php:${OLD_TAG}" 2>/dev/null || true
              done
          done
          
          # Clean up Node duplicates (keep only bookworm or fallback to bullseye)
          echo "Cleaning Node duplicates..."
          NODE_VERSIONS=$(crane ls ${{ env.GHCR_BASE }}/node 2>/dev/null | \
            grep -E '^[0-9]+-(bullseye|bookworm)$' | \
            sed 's/-.*//' | sort -un)
          
          for VERSION in $NODE_VERSIONS; do
            # Check what's available and prefer bookworm
            if crane manifest "${{ env.GHCR_BASE }}/node:${VERSION}-bookworm" >/dev/null 2>&1; then
              PREFERRED_TAG="${VERSION}-bookworm"
            else
              PREFERRED_TAG="${VERSION}-bullseye"
            fi
            
            # Delete all variants except the preferred one
            crane ls ${{ env.GHCR_BASE }}/node 2>/dev/null | \
              grep "^${VERSION}-" | \
              grep -v "^${PREFERRED_TAG}$" | \
              while read OLD_TAG; do
                echo "  🗑️ Removing duplicate: node:${OLD_TAG}"
                crane delete "${{ env.GHCR_BASE }}/node:${OLD_TAG}" 2>/dev/null || true
              done
          done
          
          echo "✅ Cleanup complete"

      - name: Summary
        run: |
          echo "🎉 Mirror job completed!"
          echo ""
          echo "Mirrored images are available at:"
          echo "  PHP: ${{ env.GHCR_BASE }}/php:*"
          echo "  Node: ${{ env.GHCR_BASE }}/node:*"
          echo "  Composer: ${{ env.GHCR_BASE }}/composer:*"
          echo "  PhantomJS: ${{ env.GHCR_BASE }}/phantomjs:latest"