ARG PHP_VERSION
ARG OS_RELEASE=bullseye
ARG NODE_VERSION=18

# Build a base PHP image with all extensions
FROM php:${PHP_VERSION}-cli-${OS_RELEASE} AS php-base
USER root
ARG PHP_VERSION

# Similar issue with other node commands : https://github.com/ariya/phantomjs/issues/15449
ENV OPENSSL_CONF=/etc/ssl/

# Install system dependencies and build tools in a single layer
RUN set -eux; \
    mkdir -p /root/.composer; \
    apt-get update -y; \
    apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    curl \
    wget \
    ca-certificates \
    gnupg2 \
    lsb-release \
    # PHP extension dependencies
    libicu-dev \
    libpng-dev \
    libzip-dev \
    libmcrypt-dev \
    libxml2-dev \
    libxslt-dev \
    # Tools
    rsync \
    openssh-client \
    zip \
    unzip \
    git \
    # Fonts and display libraries for headless browser support
    fontconfig \
    libfontconfig1 \
    libfontconfig1-dev \
    libnss3 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libc6 \
    libcairo2 \
    libgdk-pixbuf2.0-0 \
    libglib2.0-0 \
    libgtk-3-0 \
    fonts-liberation \
    xdg-utils \
    libgbm1 \
    libx11-xcb1 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libgcc1 \
    libgconf-2-4 \
    libnspr4 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    libasound2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Handle Python installation based on PHP version
RUN if [ "${PHP_VERSION}" = "7.0" ]; then \
        printf "deb http://archive.debian.org/debian/ stretch main\ndeb-src http://archive.debian.org/debian/ stretch main" > /etc/apt/sources.list; \
        apt-get update -y; \
        apt-get install -y --no-install-recommends python python-pip; \
        apt-get clean; \
        rm -rf /var/lib/apt/lists/*; \
    elif [ "$(printf "7.1\n${PHP_VERSION}" | sort -g | head -n1 | awk -F"." '{print $1"."$2}')" = "7.1" ]; then \
        apt-get update -y; \
        apt-get install -y --no-install-recommends python3 python3-pip python2; \
        if [ ! -f "/usr/bin/pip" ]; then ln -s /usr/bin/pip3 /usr/bin/pip; ln -s /usr/bin/python3 /usr/bin/python; fi; \
        apt-get clean; \
        rm -rf /var/lib/apt/lists/*; \
    fi

# PHP Extension Installer
ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/

# Install PHP Extensions required by Magento OS, Adobe Commerce, and the UCT (pcntl)
RUN chmod +x /usr/local/bin/install-php-extensions && install-php-extensions \
    apcu \
    amqp \
    bcmath \
    calendar \
    exif \
    ftp \
    gd \
    intl \
    imap \
    mysqli \
    pcntl \
    pdo_mysql \
    redis \
    soap \
    sockets \
    sodium \
    xsl \
    zip \
    && if [ "$(printf "8.3\n${PHP_VERSION}" | sort -g | head -n1)" != "8.3" ]; then \
        install-php-extensions imagick; \
    fi \
    && if [ "$(printf "8.2\n${PHP_VERSION}" | sort -g | head -n1)" != "8.2" ]; then \
        install-php-extensions mcrypt; \
    fi

# Install Composer
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_HOME /root/.composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Final stage - can be used directly or as base for Node.js variants
FROM php-base AS final

# Install Node.js using n for version management
ARG NODE_VERSION
RUN curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n -o /usr/local/bin/n \
    && chmod +x /usr/local/bin/n \
    && n ${NODE_VERSION} \
    && npm install -g yarn

# Install global Node packages (excluding puppeteer due to 403 error)
RUN npm install -g \
    grunt-cli \
    gulp \
    requirejs \
    terser \
    uglify-js \
    && npm cache clean --force

# Copy PhantomJS if needed
COPY --from=rollupdev/phantomjs:latest /build/phantomjs/bin/phantomjs /usr/local/bin/phantomjs 2>/dev/null || true

# Set up paths
ENV PATH="${PATH}:/usr/local/lib/node_modules/bin"
ENV NODE_PATH="/usr/local/lib/node_modules"

# Create a script to switch Node versions easily
RUN echo '#!/bin/bash\nn "$@"' > /usr/local/bin/switch-node \
    && chmod +x /usr/local/bin/switch-node

WORKDIR /var/www/html

# Label for metadata
LABEL maintainer="DevOps Team" \
      description="Optimized GitLab CI image with PHP ${PHP_VERSION} and Node.js ${NODE_VERSION}" \
      php.version="${PHP_VERSION}" \
      node.version="${NODE_VERSION}"